from aiogram import Router, F
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from db import Session, Order

router = Router()


class PaymentState(StatesGroup):
    order_id = State()


# === –ö–æ–º–∞–Ω–¥–∞ /pay –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ "–û–ø–ª–∞—Ç–∏—Ç—å" ===
@router.message(F.text == "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑")
async def start_payment(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–∫–∞–∑–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å:")
    await state.set_state(PaymentState.order_id)


@router.message(PaymentState.order_id)
async def process_order_id(message: Message, state: FSMContext):
    try:
        order_id = int(message.text.strip())
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–∫–∞–∑–∞.")
        return

    db_session = Session()
    order = db_session.query(Order).get(order_id)

    if not order:
        await message.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    # –°—á–∏—Ç–∞–µ–º —Å—É–º–º—É —Å –∫–æ–º–∏—Å—Å–∏–µ–π
    base_price = order.price
    commission = base_price * 0.05
    total_price = base_price + commission

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ CryptoBot
    invoice_link = f"https://t.me/CryptoBot?start=IVlqkAgAAAAdGZhbmtzX2JvdF8xfDB8MTIzNDU2Nzg5f{total_price:.2f}USDT"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ CryptoBot", url=invoice_link)]
    ])

    await message.answer(
        f"–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {base_price} USDT\n"
        f"–ö–æ–º–∏—Å—Å–∏—è (5%): {commission:.2f} USDT\n"
        f"–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: {total_price:.2f} USDT",
        reply_markup=keyboard
    )

    await state.clear()