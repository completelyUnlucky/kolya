from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from db import Session, Order, User
from utils.cryptobot import create_invoice

router = Router()


class CompleteOrderState(StatesGroup):
    order_id = State()


@router.message(F.text == "üí∞ –ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω")
async def request_order_id(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–∫–∞–∑–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏:")
    await state.set_state(CompleteOrderState.order_id)


@router.message(CompleteOrderState.order_id)
async def send_payment_link(message: Message, state: FSMContext):
    try:
        order_id = int(message.text.strip())
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–∫–∞–∑–∞.")
        return

    db_session = Session()
    freelancer = db_session.query(User).filter_by(telegram_id=message.from_user.id).first()
    order = db_session.query(Order).get(order_id)

    if not freelancer or freelancer.role != "freelancer":
        await message.answer("‚ùå –í—ã –Ω–µ —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä!")
        return

    if not order:
        await message.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    base_price = order.price
    commission = base_price * 0.05
    total_price = round(base_price + commission, 2)

    try:
        invoice_url = create_invoice(amount_usdt=total_price, order_id=order_id)
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=invoice_url)]
        ])

        await message.bot.send_message(
            chat_id=order.user.telegram_id,
            text=f"‚úÖ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å @{freelancer.username} –∑–∞–≤–µ—Ä—à–∏–ª –∑–∞–∫–∞–∑.\n"
                 f"–°—É–º–º–∞: {base_price} USDT\n"
                 f"–ö–æ–º–∏—Å—Å–∏—è (5%): {commission:.2f} USDT\n"
                 f"–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: {total_price:.2f} USDT",
            reply_markup=keyboard
        )
        await message.answer("‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∑–∞–∫–∞–∑—á–∏–∫—É.")
    except Exception as e:
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á—ë—Ç: {str(e)}")

    await state.clear()
