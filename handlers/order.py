from aiogram import Router, F
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from db import Session, User, Order
from config import CHANNEL_ID

router = Router()

class CreateOrderState(StatesGroup):
    text = State()


@router.message(F.text == "üì¶ –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑")
async def create_order_start(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞:")
    await state.set_state(CreateOrderState.text)


@router.message(CreateOrderState.text)
async def process_order_text(message: Message, state: FSMContext):
    db_session = Session()
    user = db_session.query(User).filter_by(telegram_id=message.from_user.id).first()

    if not user:
        await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        await state.clear()
        return

    new_order = Order(
        text=message.text,
        user_id=user.telegram_id
    )
    db_session.add(new_order)
    db_session.commit()

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è", callback_data=f"apply_{new_order.id}")]
    ])

    await message.bot.send_message(
        chat_id=CHANNEL_ID,
        text=f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑:\n\n{message.text}\n\nID: {new_order.id}",
        reply_markup=keyboard
    )

    await message.answer("–í–∞—à –∑–∞–∫–∞–∑ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ.")
    await state.clear()


# ==== –ö–Ω–æ–ø–∫–∞ "–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è" ====
@router.callback_query(lambda c: c.data.startswith("apply_"))
async def apply_to_order(callback: CallbackQuery):
    try:
        order_id = int(callback.data.split("_")[1])
    except (IndexError, ValueError):
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–∫–∞–∑–∞")
        return

    db_session = Session()
    freelancer = db_session.query(User).filter_by(telegram_id=callback.from_user.id).first()
    order = db_session.query(Order).get(order_id)

    if not order:
        await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    if not freelancer or freelancer.role != "freelancer":
        await callback.answer("‚ùå –í—ã –Ω–µ —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä!")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"confirm_{freelancer.telegram_id}_{order_id}")]
    ])

    await callback.bot.send_message(
        chat_id=order.user.telegram_id,
        text=f"–§—Ä–∏–ª–∞–Ω—Å–µ—Ä @{freelancer.username} –æ—Ç–∫–ª–∏–∫–Ω—É–ª—Å—è –Ω–∞ –≤–∞—à –∑–∞–∫–∞–∑.",
        reply_markup=keyboard
    )
    await callback.answer("–í—ã –æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å!")


@router.callback_query(lambda c: c.data.startswith("confirm_"))
async def confirm_freelancer(callback: CallbackQuery):
    _, fid, oid = callback.data.split("_")
    db_session = Session()
    freelancer = db_session.query(User).filter_by(telegram_id=int(fid)).first()
    order = db_session.query(Order).get(int(oid))

    if not freelancer:
        await callback.answer("‚ùå –§—Ä–∏–ª–∞–Ω—Å–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    try:
        await callback.bot.send_message(
            chat_id=freelancer.telegram_id,
            text=f"–ó–∞–∫–∞–∑—á–∏–∫ @{callback.from_user.username} –ø—Ä–∏–Ω—è–ª –≤–∞—à –æ—Ç–∫–ª–∏–∫.\n"
                 f"–¢–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞:\n{order.text}"
        )
        await callback.message.edit_text("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é.")
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}")